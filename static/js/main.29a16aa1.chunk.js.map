{"version":3,"sources":["store/index.ts","components/TodoLIst.tsx","api.ts","App.tsx","index.tsx"],"names":["setSortField","field","type","isLoading","state","loading","setUnvisibleButton","visibleButton","getVisibleTodos","createSelector","todos","sortField","callback","a","b","title","localeCompare","user","name","completed","sort","initialState","store","createStore","action","composeWithDevTools","TodoList","dispatch","useDispatch","useSelector","onClick","className","map","todo","key","id","removedTodo","filter","API_URL","getDataFromServer","Promise","all","fetch","then","response","json","users","find","userId","App","hideButton","message","finishLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29a16aa1.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createSelector } from 'reselect';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SORT_BY = 'SORT_BY';\nconst REMOVED_TODO = 'REMOVED_TODO';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (message: string, todos: Todo[]) => ({\n  type: FINISH_LOADING,\n  message,\n  todos,\n});\n\nexport const removedTodo = (todos: GetTodos[]) => ({\n  type: REMOVED_TODO,\n  todos,\n});\n\nexport const setSortField = (field: string) => ({\n  type: SORT_BY,\n  field,\n});\n\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getTodos = (state: RootState) => state.todos;\nexport const sortBy = (state: RootState) => state.sortField;\nexport const setUnvisibleButton = (state: RootState) => state.visibleButton;\n\nexport const getVisibleTodos = createSelector(\n  getTodos,\n  sortBy,\n\n  (todos: GetTodos[], sortField: string) => {\n    let callback: (a: GetTodos, b: GetTodos) => number;\n\n    switch (sortField) {\n      case 'title':\n        callback = (a, b) => a.title.localeCompare(b.title);\n        break;\n      case 'userName':\n        callback = (a, b) => a.user.name.localeCompare(b.user.name);\n        break;\n      case 'status':\n        callback = (a, b) => +a.completed - +b.completed;\n        break;\n      default: callback = () => 0;\n    }\n\n    const visibleTodos = [...todos].sort(callback);\n\n    return visibleTodos;\n  },\n);\n\n// Initial state\nexport type RootState = {\n  todos: GetTodos[];\n  loading: boolean;\n  sortField: string;\n  visibleButton: boolean;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  sortField: '',\n  visibleButton: true,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        visibleButton: false,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        todos: action.todos,\n      };\n\n    case REMOVED_TODO:\n      return {\n        ...state,\n        todos: action.todos,\n      }\n\n    case SORT_BY:\n      return {\n        ...state,\n        sortField: action.field,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setSortField, getVisibleTodos, removedTodo } from '../store/index';\n\nexport const TodoList = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getVisibleTodos);\n\n  const sortByTitle = () => {\n    dispatch(setSortField('title'));\n  };\n\n  const sortByName = () => {\n    dispatch(setSortField('userName'));\n  };\n\n  const sortByStatus = () => {\n    dispatch(setSortField('status'));\n  };\n\n  const removeTodo = (id: number) => {\n    dispatch(removedTodo(todos.filter(todo => todo.id !== id)));\n  };\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={sortByTitle}\n        className=\"button\"\n      >\n        sort by title\n      </button>\n      <button\n        type=\"button\"\n        onClick={sortByName}\n        className=\"button\"\n      >\n        sort by name\n      </button>\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={sortByStatus}\n      >\n        sort by status\n      </button>\n      <ul>\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className=\"item\"\n          >\n            <p>{todo.title}</p>\n            <p>{todo.user.name}</p>\n            <p>{todo.completed ? 'completed' : 'uncompleted'}</p>\n            <button\n              type=\"button\"\n              onClick={() => removeTodo(todo.id)}\n              className=\"button\"\n            >\n              Remove todo\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst getTodos = () => {\n  return fetch(`${API_URL}/todos.json`)\n    .then(response => response.json());\n};\n\nconst getUsers = () => {\n  return fetch(`${API_URL}/users.json`)\n    .then(response => response.json());\n};\n\nexport const getDataFromServer = async (): Promise<GetTodos[]> => {\n  const [todos, users] = await Promise.all([getTodos(), getUsers()]);\n\n  return todos.map((todo: Todo) => ({\n    ...todo,\n    user: users.find((user: User) => todo.userId === user.id),\n  }));\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoLIst';\n\nimport './App.scss';\n\nimport {\n  isLoading,\n  startLoading,\n  finishLoading,\n  setUnvisibleButton,\n} from './store';\nimport { getDataFromServer } from './api';\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const hideButton = useSelector(setUnvisibleButton);\n\n  const downLoadData = () => {\n    dispatch(startLoading());\n\n    getDataFromServer()\n      .then((todos) => dispatch(finishLoading('Load Success', todos)));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {hideButton && (\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={downLoadData}>\n          Load\n        </button>\n      )}\n      {loading ? 'Loading...' : !hideButton && <TodoList />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}